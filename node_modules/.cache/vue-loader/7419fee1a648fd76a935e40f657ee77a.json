{"remainingRequest":"/home/runner/work/U1_Calculo_B6/U1_Calculo_B6/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U1_Calculo_B6/U1_Calculo_B6/src/views/curso/Tema2.vue?vue&type=template&id=45d93f04&lang=pug&","dependencies":[{"path":"/home/runner/work/U1_Calculo_B6/U1_Calculo_B6/src/views/curso/Tema2.vue","mtime":1745002910302},{"path":"/home/runner/work/U1_Calculo_B6/U1_Calculo_B6/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U1_Calculo_B6/U1_Calculo_B6/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U1_Calculo_B6/U1_Calculo_B6/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U1_Calculo_B6/U1_Calculo_B6/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U1_Calculo_B6/U1_Calculo_B6/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5jdXJzby1tYWluLWNvbnRhaW5lci5wYi0zCiAgQmFubmVySW50ZXJubyg6c3ViVGl0dWxvPSInMi4gRnVuY2lvbmVzJyIpCiAgLmNvbnRhaW5lci50YXJqZXRhLnRhcmpldGEtLWJsYW5jYS5wLTQucC1tZC01Lm92ZXJmbG93LWhpZGRlbgoKICAgIC5iZy1jb2xvci0yLm1iLTUoZGF0YS1hb3M9ImZhZGUtdXAiKQogICAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIuYWxpZ24taXRlbXMtY2VudGVyCiAgICAgICAgLmNvbC1sZy1hdXRvLm1iLTMubWItbGctMAogICAgICAgICAgZmlndXJlCiAgICAgICAgICAgIGltZyhzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWEyLzEucG5nJywgYWx0PScnKQogICAgICAgIC5jb2wtbGcKICAgICAgICAgIC5wLTQKICAgICAgICAgICAgcC5tYi0wKGRhdGEtYW9zPSJmYWRlLXVwIikgVW5hIGZ1bmNpw7NuIGVzIHVuYSByZWxhY2nDs24gZW50cmUgZG9zIGNvbmp1bnRvcywgZG9uZGUgY2FkYSBlbGVtZW50byBkZWwgPGI+ZG9taW5pbzwvYj4gc2UgYXNvY2lhIGNvbiB1biDDum5pY28gZWxlbWVudG8gZGVsIDxiPnJhbmdvIG8gY29kb21pbmlvLjwvYj4gRW4gb3RyYXMgcGFsYWJyYXMsIGNhZGEgPGI+dmFsb3IgZGUgZW50cmFkYTwvYj4gKHZhcmlhYmxlIGluZGVwZW5kaWVudGUpIHRpZW5lIHVuIDxiPsO6bmljbyB2YWxvciBkZSBzYWxpZGE8L2I+ICh2YXJpYWJsZSBkZXBlbmRpZW50ZSkuIExhcyBmdW5jaW9uZXMgcHVlZGVuIHJlcHJlc2VudGFyc2UgbWVkaWFudGU6CgogICAgLmJnLWZ1bGwtd2lkdGguYmdfaW1nCiAgICAgIC5weC00LnB4LW1kLTUucHktNAoKICAgICAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIuYWxpZ24taXRlbXMtc3RyZXRjaC5tYi01CiAgICAgICAgICAuY29sLWxnLTQubWItMy5tYi1sZy0wCiAgICAgICAgICAgIC5iZy1jb2xvci0yLnAtNChkYXRhLWFvcz0iZmFkZS1sZWZ0IikuaC0xMDAKICAgICAgICAgICAgICAucm93LmFsaWduLWl0ZW1zLWNlbnRlcgogICAgICAgICAgICAgICAgLmNvbC1sZy1hdXRvCiAgICAgICAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEyLzIuc3ZnIiwgc3R5bGU9Im1heC13aWR0aDogOTBweCIpLm14LWF1dG8KICAgICAgICAgICAgICAgIC5jb2wtbGcKICAgICAgICAgICAgICAgICAgaDUubWItMiBQcmltZXJhCQogICAgICAgICAgICAgICAgICBwLm1iLTAgRWN1YWNpb25lcwogICAgICAgICAgLmNvbC1sZy00Lm1iLTMubWItbGctMAogICAgICAgICAgICAuYmctY29sb3ItMi5wLTQoZGF0YS1hb3M9ImZhZGUtbGVmdCIpLmgtMTAwCiAgICAgICAgICAgICAgLnJvdy5hbGlnbi1pdGVtcy1jZW50ZXIKICAgICAgICAgICAgICAgIC5jb2wtbGctYXV0bwogICAgICAgICAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMi8yLnN2ZyIsIHN0eWxlPSJtYXgtd2lkdGg6IDkwcHgiKS5teC1hdXRvCiAgICAgICAgICAgICAgICAuY29sLWxnCiAgICAgICAgICAgICAgICAgIGg1Lm1iLTIgU2VndW5kYQkJCiAgICAgICAgICAgICAgICAgIHAubWItMCBHcsOhZmljYXMKICAgICAgICAgIC5jb2wtbGctNC5tYi0zLm1iLWxnLTAKICAgICAgICAgICAgLmJnLWNvbG9yLTIucC00KGRhdGEtYW9zPSJmYWRlLWxlZnQiKS5oLTEwMAogICAgICAgICAgICAgIC5yb3cuYWxpZ24taXRlbXMtY2VudGVyCiAgICAgICAgICAgICAgICAuY29sLWxnLWF1dG8KICAgICAgICAgICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTIvMi5zdmciLCBzdHlsZT0ibWF4LXdpZHRoOiA5MHB4IikubXgtYXV0bwogICAgICAgICAgICAgICAgLmNvbC1sZwogICAgICAgICAgICAgICAgICBoNS5tYi0yIFRlcmNlcmEJCQogICAgICAgICAgICAgICAgICBwLm1iLTAgVGFibGFzIGRlIHZhbG9yZXMKICAgIAogICAgICAgIC5yb3cubWItNQogICAgICAgICAgLmNvbC1sZy00Lm9yZGVyLTIKICAgICAgICAgICAgZmlndXJlCiAgICAgICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTIvMy5zdmciLCBkYXRhLWFvcz0iem9vbS1pbiIpCiAgICAgICAgICAuY29sLWxnLTgub3JkZXItMS5tYi0zLm1iLWxnLTAKICAgICAgICAgICAgcChkYXRhLWFvcz0iZmFkZS1sZWZ0IikgU2Vnw7puIE9ydGl6IENhbXBvcyBldCBhbC4gKDIwMTYpLCBlbCBjb25jZXB0byBkZSBmdW5jacOzbiBlcyBmdW5kYW1lbnRhbCBlbiBlbCBhbsOhbGlzaXMgbWF0ZW3DoXRpY28geSB0aWVuZSBhcGxpY2FjaW9uZXMgZW4gZWNvbm9tw61hIHkgbmVnb2Npb3MuIFBlcm1pdGUgbW9kZWxhciByZWxhY2lvbmVzIGVudHJlIHZhcmlhYmxlcyBjb21vIDxiPm9mZXJ0YSB5IGRlbWFuZGEsIGNvc3RvcyBkZSBwcm9kdWNjacOzbiwgaW5ncmVzb3MgeSB1dGlsaWRhZGVzLjwvYj4KICAgICAgICAKICAgICAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIKICAgICAgICAgIC5jb2wtbGctOAogICAgICAgICAgICAuYmctY29sb3Itd2hpdGUuc2hhZG93LXNvZnQucC00Lm1iLTQKICAgICAgICAgICAgICAucm93Lmp1c3RpZnktY29udGVudC1hcm91bmQuYWxpZ24taXRlbXMtY2VudGVyCiAgICAgICAgICAgICAgICAuY29sLW1kLWF1dG8KICAgICAgICAgICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvdGVtcGxhdGUvdmlkZW8uc3ZnIiwgc3R5bGU9IndpZHRoOiA4MHB4OyIpLm14LWF1dG8ubWItNC5tYi1sZy0wCiAgICAgICAgICAgICAgICAuY29sCiAgICAgICAgICAgICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWJldHdlZW4uYWxpZ24taXRlbXMtY2VudGVyCiAgICAgICAgICAgICAgICAgICAgLmNvbC5tYi0zLm1iLXNtLTAKICAgICAgICAgICAgICAgICAgICAgIGg1Lm1iLTEgwr9RdcOpIGVzIHVuYSBGdW5jacOzbj8KICAgICAgICAgICAgICAgICAgICAgIHAubWItMCBQYXJhIGFtcGxpYXIgbG9zIGNvbmNlcHRvcyBzb2JyZSBmdW5jaW9uZXMsIGxlIGludml0YW1vcyBhIHZlciBlbCBzaWd1aWVudGUgdsOtZGVvLgogICAgICAgICAgICAgICAgICAgIC5jb2wtc20tYXV0bwogICAgICAgICAgICAgICAgICAgICAgYS5ib3Rvbi5jb2xvci1hY2VudG8tYm90b25lcy50ZXh0by1ibGFuY28oaHJlZj0iaHR0cHM6Ly95b3V0dS5iZS9xekVJNVVYbGplVSIgdGFyZ2V0PSJfYmxhbmsiKQogICAgICAgICAgICAgICAgICAgICAgICBzcGFuIFZlciB2aWRlbwogICAgICAgICAgICAgICAgICAgICAgICBpLmZhcy5mYS1hcnJvdy1yaWdodAogICAgCiAgICAucm93Lm1iLTUKICAgICAgLmNvbC1sZy00Lm9yZGVyLTIKICAgICAgICBmaWd1cmUKICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEyLzQucG5nIiwgZGF0YS1hb3M9Inpvb20taW4iKQogICAgICAuY29sLWxnLTgub3JkZXItMS5tYi0zLm1iLWxnLTAKICAgICAgICAuYmctY29sb3ItMS5wLTUoZGF0YS1hb3M9ImZhZGUtbGVmdCIpCiAgICAgICAgICBoNSBFamVtcGxvIAogICAgICAgICAgcC5tYi0wIFVuYSBlbXByZXNhIHByb2R1Y2UgeSB2ZW5kZSB1biBwcm9kdWN0by4gTGEgZnVuY2nDs24gZGUgY29zdG8gdG90YWwgZXN0w6EgZGFkYSBwb3IgQyh4KSA9IDEwMDAgKyA1MHgsIGRvbmRlIHggZXMgbGEgY2FudGlkYWQgcHJvZHVjaWRhLiBFc3RhIGZ1bmNpw7NuIGluZGljYSBxdWUgbG9zIGNvc3RvcyB0b3RhbGVzIHNlIGNvbXBvbmVuIGRlIHVuIGNvc3RvIGZpam8gZGUgJDEwMDAgeSB1biBjb3N0byB2YXJpYWJsZSBkZSAkNTAgcG9yIHVuaWRhZCBwcm9kdWNpZGEuIEEgbWVkaWRhIHF1ZSBsYSBjYW50aWRhZCBwcm9kdWNpZGEgYXVtZW50YSwgbG9zIGNvc3RvcyB0b3RhbGVzIHRhbWJpw6luIHNlIGluY3JlbWVudGFuIHNpZ3VpZW5kbyBsYSByZWxhY2nDs24gZXN0YWJsZWNpZGEgcG9yIGxhIGZ1bmNpw7NuLgogICAgCiAgICBoMihkYXRhLWFvcz0iZmFkZS1sZWZ0IikgRWplcmNpY2lvcwogICAgcC5tYi01IEEgY29udGludWFjacOzbiwgc2UgcHJlc2VudGFuIGVqZXJjaWNpb3Mgc29icmUgZnVuY2lvbmVzIHBhcmEgYW5hbGl6YXIgc3UgZGVmaW5pY2nDs24sIGV2YWx1YWNpw7NuIHkgZG9taW5pby4KCiAgICAucm93LmFsaWduLWl0ZW1zLXN0YXJ0Lm1iLTUKICAgICAgLmNvbC1sZy00Lm1iLTMubWItbGctMAogICAgICAgIGZpZ3VyZQogICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTIvNS5wbmciLCBhbHQ9IiIpLm1iLTQubWItbGctMAogICAgICAuY29sLWxnLTgKICAgIAogICAgICAgIEFjb3JkaW9uQSh0aXBvPSJiIikKICAgICAgICAgIC5kaXYodGl0dWxvPSLCv0xhIHJlbGFjacOzbiB4wrIgKyB5wrIgPSAyNSByZXByZXNlbnRhIHVuYSBmdW5jacOzbj8iKQogICAgICAgICAgICBwIFBhcmEgcXVlIHVuYSByZWxhY2nDs24gc2VhIHVuYSBmdW5jacOzbiwgY2FkYSB2YWxvciBkZSBsYSB2YXJpYWJsZSBpbmRlcGVuZGllbnRlICh4KSBkZWJlIGNvcnJlc3BvbmRlciBhIHVuIMO6bmljbyB2YWxvciBkZSBsYSB2YXJpYWJsZSBkZXBlbmRpZW50ZSAoeSkuIEVuIGxhIGVjdWFjacOzbiBkYWRhLCBwYXJhIGNhZGEgeCBleGlzdGVuIGRvcyB2YWxvcmVzIGRlIHkgKHVubyBwb3NpdGl2byB5IG90cm8gbmVnYXRpdm8pLiBQb3IgbG8gdGFudG8sIHjCsiArIHnCsiA9IDI1IG5vIHJlcHJlc2VudGEgdW5hIGZ1bmNpw7NuLgogICAgCiAgICAgICAgICAuZGl2KHRpdHVsbz0iQ8OhbGN1bG8gZGUgZig1KSB5IGYoLTIpIGVuIGxhIGZ1bmNpw7NuIGYoeCkgPSAyeCAtIDMiKQogICAgICAgICAgICBwIFBhcmEgZW5jb250cmFyIGVsIHZhbG9yIGRlIGYoeCkgcGFyYSB1biB2YWxvciBlc3BlY8OtZmljbyBkZSB4LCBzaW1wbGVtZW50ZSByZWVtcGxhemFtb3MgeCBlbiBsYSBlY3VhY2nDs24gZGUgbGEgZnVuY2nDs24uCiAgICAgICAgICAgIHAubWItMC50ZXh0LWNlbnRlciBmKDUpID0gMig1KSAtIDMgPSAxMCAtIDMgPSA3CiAgICAgICAgICAgIHAubWItMC50ZXh0LWNlbnRlciBmKC0yKSA9IDIoLTIpIC0gMyA9IC00IC0gMyA9IC03CiAgICAgICAgICAgIHAubWItMC50ZXh0LWNlbnRlciBQb3IgbG8gdGFudG8sIGYoNSkgPSA3IHkgZigtMikgPSAtNy4KCiAgICAKICAgICAgICAgIC5kaXYodGl0dWxvPSJEb21pbmlvIHkgcmFuZ28gZGUgbGEgZnVuY2nDs24gZih4KSA9IOKImih4IC0gMSkiKQogICAgICAgICAgICBwIEVsIGRvbWluaW8gc2Ugb2J0aWVuZSBjb25zaWRlcmFuZG8gcXVlIGxhIHJhw616IGN1YWRyYWRhIGRlYmUgdGVuZXIgdW4gYXJndW1lbnRvIG5vIG5lZ2F0aXZvOiB4IC0gMSDiiaUgMCDihpIgeCDiiaUgMS4gRW50b25jZXMsIGVsIGRvbWluaW8gZXMgWzEsIOKInikuIEVsIHJhbmdvIHNlIGRldGVybWluYSBvYnNlcnZhbmRvIHF1ZSBsYSByYcOteiBjdWFkcmFkYSBzaWVtcHJlIGRhIHZhbG9yZXMgbm8gbmVnYXRpdm9zIHkgYXVtZW50YSBhIG1lZGlkYSBxdWUgeCBhdW1lbnRhLCBwb3IgbG8gcXVlIGVsIHJhbmdvIGVzIFswLCDiiJ4pLgoKICAgICN0XzJfMS50aXR1bG8tc2VndW5kbyhkYXRhLWFvcz0iZmxpcC11cCIpCiAgICAgIGgyICNbc3BhbiAyLjFdIEZ1bmNpb25lcyBlc3BlY2lhbGVzCiAgICAKICAgIHAubWItNCBMYXMgZnVuY2lvbmVzIGVzcGVjaWFsZXMgcG9zZWVuIHByb3BpZWRhZGVzIHkgYXBsaWNhY2lvbmVzIHBhcnRpY3VsYXJlcyBlbiBkaXN0aW50b3MgY2FtcG9zLCBpbmNsdXllbmRvIGxhIGVjb25vbcOtYSB5IGxvcyBuZWdvY2lvcy4gRW50cmUgbGFzIG3DoXMgdXRpbGl6YWRhcyBzZSBlbmN1ZW50cmFuOgoKICAgIC5iZy1mdWxsLXdpZHRoLmJnLWZvbmRvLTEubWItNQogICAgICAucC00LnAtbWQtNQogICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5hbGlnbi1pdGVtcy1jZW50ZXIubWItNQogICAgICAgICAgLmNvbC1sZy0xMAogICAgICAgICAgICBJbWFnZW5JbmZvZ3JhZmljYS5jb2xvci1zZWN1bmRhcmlvCiAgICAgICAgICAgICAgdGVtcGxhdGUodi1zbG90OmltYWdlbikKICAgICAgICAgICAgICAgIGZpZ3VyZQogICAgICAgICAgICAgICAgICBpbWcoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hMi82LnN2ZycsIGFsdD0nJywgc3R5bGU9Im1heC13aWR0aDogMTEwNnB4OyIpLm14LWF1dG8KICAgIAogICAgICAgICAgICAgIC5iZy1jb2xvci13aGl0ZS5ib3gtc2hhZG93LnAtMyh4PSIyJSIgeT0iMjYuNSUiIG51bWVybz0iKyIpCiAgICAgICAgICAgICAgICBoNSBGdW5jaW9uZXMgbGluZWFsZXMKICAgICAgICAgICAgICAgIHAgUmVwcmVzZW50YW4gcmVsYWNpb25lcyBwcm9wb3JjaW9uYWxlcywgY29tbyBsYSBvZmVydGEgeSBsYSBkZW1hbmRhLgogICAgCiAgICAgICAgICAgICAgLmJnLWNvbG9yLXdoaXRlLmJveC1zaGFkb3cucC0zKHg9IjczJSIgeT0iMjQlIiBudW1lcm89IisiKQogICAgICAgICAgICAgICAgaDUgRnVuY2lvbmVzIGN1YWRyw6F0aWNhcwogICAgICAgICAgICAgICAgcCBNb2RlbGFuIHNpdHVhY2lvbmVzIGRlIG9wdGltaXphY2nDs24sIGNvbW8gbGEgbWF4aW1pemFjacOzbiBkZSB1dGlsaWRhZGVzIG8gbGEgbWluaW1pemFjacOzbiBkZSBjb3N0b3MuCiAgICAKICAgICAgICAgICAgICAuYmctY29sb3Itd2hpdGUuYm94LXNoYWRvdy5wLTMoeD0iNjglIiB5PSI2NiUiIG51bWVybz0iKyIpCiAgICAgICAgICAgICAgICBoNSBGdW5jaW9uZXMgZXhwb25lbmNpYWxlcyB5IGxvZ2Fyw610bWljYXMKICAgICAgICAgICAgICAgIHAgU29uIGZ1bmRhbWVudGFsZXMgZW4gZWwgYW7DoWxpc2lzIGRlbCBjcmVjaW1pZW50byB5IGxhIGRlY2FkZW5jaWEsIGNvbW8gZWwgY3JlY2ltaWVudG8gcG9ibGFjaW9uYWwgbyBlbCBpbnRlcsOpcyBjb21wdWVzdG8uCiAgICAKICAgIHAubWItNCBTZWfDum4gR2FyY8OtYSBGcmFuY2hpbmkgeSBBbHZhcmFkbyBBcmVsbGFubyAoMjAxNiksIGVzdGFzIGZ1bmNpb25lcyBwZXJtaXRlbiBtb2RlbGFyIGRpc3RpbnRvcyB0aXBvcyBkZSByZWxhY2lvbmVzIGVudHJlIHZhcmlhYmxlcyB5IGZhY2lsaXRhbiBlbCBhbsOhbGlzaXMgbWF0ZW3DoXRpY28gZW4gZGl2ZXJzb3MgY29udGV4dG9zLgoKCiAgICAucm93Lm1iLTUKICAgICAgLmNvbC1sZy00Lm9yZGVyLTIKICAgICAgICBmaWd1cmUKICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEyLzcucG5nIiwgZGF0YS1hb3M9Inpvb20taW4iKQogICAgICAuY29sLWxnLTgub3JkZXItMS5tYi0zLm1iLWxnLTAKICAgICAgICAuYmctY29sb3ItMS5wLTUubWItMyhkYXRhLWFvcz0iZmFkZS1sZWZ0IikKICAgICAgICAgIGg1IEVqZW1wbG8gCiAgICAgICAgICBwLm1iLTAgVW5hIGVtcHJlc2EgcHJvZHVjZSB1biBiaWVuIHkgaGEgZGV0ZXJtaW5hZG8gcXVlIHN1IGZ1bmNpw7NuIGRlIGNvc3RvIHRvdGFsIGVzdMOhIGRhZGEgcG9yIEMoeCkgPSA1MDAgKyAxMHggKyAwLjF4MiwgZG9uZGUgeCBlcyBsYSBjYW50aWRhZCBwcm9kdWNpZGEuIEVzdGEgZnVuY2nDs24gY3VhZHLDoXRpY2EgaW5kaWNhIHF1ZSBsb3MgY29zdG9zIHRvdGFsZXMgaW5jbHV5ZW4gdW4gY29zdG8gZmlqbyBkZSAkNTAwLCB1biBjb3N0byB2YXJpYWJsZSBkZSAkMTAgcG9yIHVuaWRhZCB5IHVuIGNvc3RvIG1hcmdpbmFsIGNyZWNpZW50ZSBkZSAkMC4xIHBvciBjYWRhIHVuaWRhZCBhZGljaW9uYWwgcHJvZHVjaWRhLiBMYSBmb3JtYSBjdWFkcsOhdGljYSBkZSBsYSBmdW5jacOzbiBwZXJtaXRlIGNhcHR1cmFyIGxhIHJlbGFjacOzbiBubyBsaW5lYWwgZW50cmUgbGEgY2FudGlkYWQgcHJvZHVjaWRhIHkgbG9zIGNvc3RvcyB0b3RhbGVzLgogICAgICAgIAogICAgICAgIHAgTGFzIGZ1bmNpb25lcyBtYXRlbcOhdGljYXMgc2UgcHVlZGVuIHJlcHJlc2VudGFyIGdyw6FmaWNhbWVudGUgcGFyYSBjb21wcmVuZGVyIHN1IGNvbXBvcnRhbWllbnRvLiBBIGNvbnRpbnVhY2nDs24sIHNlIHByZXNlbnRhbiB0cmVzIHRpcG9zIGRlIGZ1bmNpb25lcyBjb24gc3VzIHJlc3BlY3Rpdm9zIGFuw6FsaXNpcyB5IHJlcHJlc2VudGFjaW9uZXM6IHVuYSBmdW5jacOzbiBsaW5lYWwsIHVuYSBjdWFkcsOhdGljYSB5IHVuYSBleHBvbmVuY2lhbC4KICAgIAogICAgVGFic0MuY29sb3ItYWNlbnRvLWNvbnRlbmlkby5tYi01CiAgICAgIC50YWJzLWNvbnRlbnQuYm9yZGVyLnB4LTQucC1tZC01LnB5LTModGl0dWxvPSJGdW5jacOzbiBsaW5lYWwiIDppY29uPSJyZXF1aXJlKCdAL2Fzc2V0cy9idWxsZXRzLzEuc3ZnJykiKQogICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlcgogICAgICAgICAgLmNvbC1sZy03LmNvbC14bC04Lm1iLTQubWItbWQtMC5vcmRlci0yCiAgICAgICAgICAgIGg0IEZ1bmNpw7NuIGxpbmVhbAogICAgICAgICAgICBwIFNlIHVzYSBsYSBlY3VhY2nDs24gPGI+eT0gbSB4ICsgYjwvYj4sIGRvbmRlIG09IDIgeSBiID0gMS4gU2UgZWxpZ2VuIGRvcyBwdW50b3M6IHBhcmEgeCA9ICAwLCB5PTE7IHBhcmEgeD0xLCB5PTMuIEdyYWZpY2FuZG8gbG9zIHB1bnRvcyAoMCwxKSB5ICgxLDMpIHkgdW5pw6luZG9sb3MgY29uIHVuYSByZWN0YSwgc2Ugb2J0aWVuZSBsYSByZXByZXNlbnRhY2nDs24gZGUgbGEgZnVuY2nDs24uCiAgICAKICAgICAgICAgIC5jb2wtbWQtOC5jb2wtbGctNS5jb2wteGwtNC5vcmRlci0xLm1iLTMubWItbGctMAogICAgICAgICAgICBmaWd1cmUoZGF0YS1hb3M9Inpvb20taW4iKQogICAgICAgICAgICAgIGltZyhzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWEyLzgucG5nJywgYWx0PScnKQogICAgCiAgICAgIC50YWJzLWNvbnRlbnQuYm9yZGVyLnB4LTQucC1tZC01LnB5LTModGl0dWxvPSJWw6lydGljZSBlIGludGVyc2VjY2lvbmVzIiA6aWNvbj0icmVxdWlyZSgnQC9hc3NldHMvYnVsbGV0cy8xLnN2ZycpIikKICAgICAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIKICAgICAgICAgIC5jb2wtbGctNy5jb2wteGwtOC5tYi00Lm1iLW1kLTAub3JkZXItMgogICAgICAgICAgICBoNCBWw6lydGljZSBlIGludGVyc2VjY2lvbmVzCiAgICAgICAgICAgIHAgU2UgY2FsY3VsYSBlbCB2w6lydGljZSBjb24gCiAgICAgICAgICAgIHAubWItMCB4ID0gLWIgLyAoMmEpCiAgICAgICAgICAgIHAubWItMCB5ID0gZigtYiAvICgyYSkpCiAgICAgICAgICAgIHAubWItMCBFbiBlc3RlIGNhc28sIGEgPSAxLCBiID0gLTQgeSBjID0gMy4KICAgICAgICAgICAgcC5tYi0wIHggPSAtKC00KSAvICgyKDEpKSA9IDIKICAgICAgICAgICAgcC5tYi0wIHkgPSBmKDIpID0gMjIgLSA0KDIpICsgMyA9IDQgLSA4ICsgMyA9IC0xCgogICAgICAgICAgICBwLm1iLTAgUG9yIGxvIHRhbnRvLCBlbCB2w6lydGljZSBkZSBsYSBmdW5jacOzbiBlcyAoMiwgLTEpLgoKICAgICAgICAgICAgcC5tYi0wIExhcyBpbnRlcnNlY2Npb25lcyBjb24gbG9zIGVqZXMgc2UgZW5jdWVudHJhbiBpZ3VhbGFuZG8gZih4KSA9IDAKICAgICAgICAgICAgcC5tYi0wIHgyIC0gNHggKyAzID0gMAogICAgICAgICAgICBwLm1iLTAgKHggLSAxKSh4IC0gMykgPSAwCiAgICAgICAgICAgIHAubWItMCB4ID0gMSBvIHggPSAzCiAgICAgICAgICAgIHAubWItMCBmKDApID0gMDIgLSA0KDApICsgMyA9IDMKCiAgICAgICAgICAgIHAubWItMCBQb3IgbG8gdGFudG8sIGxhcyBpbnRlcnNlY2Npb25lcyBjb24gbG9zIGVqZXMgc29uICgxLCAwKSwgKDMsIDApIHkgKDAsIDMpLgoKICAgIAogICAgICAgICAgLmNvbC1tZC04LmNvbC1sZy01LmNvbC14bC00Lm9yZGVyLTEubWItMy5tYi1sZy0wCiAgICAgICAgICAgIGZpZ3VyZShkYXRhLWFvcz0iem9vbS1pbiIpCiAgICAgICAgICAgICAgaW1nKHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYTIvOC0xLnBuZycsIGFsdD0nJykKICAgIAogICAgICAudGFicy1jb250ZW50LmJvcmRlci5weC00LnAtbWQtNS5weS0zKHRpdHVsbz0iRnVuY2nDs24gZXhwb25lbmNpYWwiIDppY29uPSJyZXF1aXJlKCdAL2Fzc2V0cy9idWxsZXRzLzEuc3ZnJykiKQogICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlcgogICAgICAgICAgLmNvbC1sZy03LmNvbC14bC04Lm1iLTQubWItbWQtMC5vcmRlci0yCiAgICAgICAgICAgIGg0IEZ1bmNpw7NuIGV4cG9uZW5jaWFsCiAgICAgICAgICAgIHAgUGFyYSBncmFmaWNhciBsYSBmdW5jacOzbiBleHBvbmVuY2lhbCBmKHgpID0gMngsIHBvZGVtb3MgZXZhbHVhciBsYSBmdW5jacOzbiBlbiBhbGd1bm9zIHB1bnRvcyB5IHVuaXIgbG9zIHB1bnRvcyByZXN1bHRhbnRlcyBjb24gdW5hIGN1cnZhIHN1YXZlLgogICAgICAgICAgICBwLm1iLTAgUGFyYSB4ID0gLTIsIGYoLTIpID0gMigtMikgPSAxLzQKICAgICAgICAgICAgcC5tYi0wIFBhcmEgeCA9IC0xLCBmKC0xKSA9IDIoLTEpID0gMS8yCiAgICAgICAgICAgIHAubWItMCBQYXJhIHggPSAwLCBmKDApID0gMjAgPSAxCiAgICAgICAgICAgIHAubWItMCBQYXJhIHggPSAxLCBmKDEpID0gMjEgPSAyCiAgICAgICAgICAgIHAgUGFyYSB4ID0gMiwgZigyKSA9IDIyID0gNAogICAgICAgICAgICBwIEdyYWZpY2FuZG8gbG9zIHB1bnRvcyAoLTIsIDEvNCksICgtMSwgMS8yKSwgKDAsIDEpLCAoMSwgMikgeSAoMiwgNCksIHkgdW5pZW5kbyBjb24gdW5hIGN1cnZhIHN1YXZlLCBvYnRlbmVtb3MgbGEgcmVwcmVzZW50YWNpw7NuIGdyw6FmaWNhIGRlIGxhIGZ1bmNpw7NuIGV4cG9uZW5jaWFsIGYoeCkgPSAyeC4KCiAgICAKICAgICAgICAgIC5jb2wtbWQtOC5jb2wtbGctNS5jb2wteGwtNC5vcmRlci0xLm1iLTMubWItbGctMAogICAgICAgICAgICBmaWd1cmUoZGF0YS1hb3M9Inpvb20taW4iKQogICAgICAgICAgICAgIGltZyhzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWEyLzgtMi5wbmcnLCBhbHQ9JycsIHN0eWxlPSJ3aWR0aDogMTAwJTsiKQogICAgCiAgICAKICAgICN0XzJfMi50aXR1bG8tc2VndW5kbyhkYXRhLWFvcz0iZmxpcC11cCIpCiAgICAgIGgyICNbc3BhbiAyLjJdIE9wZXJhY2lvbmVzIGNvbiBmdW5jaW9uZXMKICAgIAogICAgLnJvdy5tYi01CiAgICAgIC5jb2wtbGctNC5tYi0zLm1iLWxnLTAKICAgICAgICBmaWd1cmUKICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEyLzkucG5nIiwgZGF0YS1hb3M9Inpvb20taW4iKQogICAgICAuY29sLWxnLTgKICAgICAgICAuYmctY29sb3ItMi5wLTQubWItMyhkYXRhLWFvcz0iZmFkZS1sZWZ0IikKICAgICAgICAgIC5yb3cuYWxpZ24taXRlbXMtc3RhcnQKICAgICAgICAgICAgLmNvbC1sZy1hdXRvCiAgICAgICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTIvMTAuc3ZnIiwgc3R5bGU9Im1heC13aWR0aDogOTBweCIpLm14LWF1dG8KICAgICAgICAgICAgLmNvbC1sZwogICAgICAgICAgICAgIHAubWItMCBMYXMgZnVuY2lvbmVzIHB1ZWRlbiBjb21iaW5hcnNlIHkgbW9kaWZpY2Fyc2UgbWVkaWFudGUgZGl2ZXJzYXMgb3BlcmFjaW9uZXMsIGNvbW8gbGEgc3VtYSwgcmVzdGEsIG11bHRpcGxpY2FjacOzbiwgZGl2aXNpw7NuIHkgY29tcG9zaWNpw7NuLiBFc3RhcyBvcGVyYWNpb25lcyBwZXJtaXRlbiBjcmVhciBudWV2YXMgZnVuY2lvbmVzIGEgcGFydGlyIGRlIGZ1bmNpb25lcyBleGlzdGVudGVzIHkgbW9kZWxhciByZWxhY2lvbmVzIG3DoXMgY29tcGxlamFzIGVudHJlIHZhcmlhYmxlcy4gQWRlbcOhcywgbGFzIHRyYW5zZm9ybWFjaW9uZXMgZGUgZnVuY2lvbmVzLCBjb21vIGRlc3BsYXphbWllbnRvcyBob3Jpem9udGFsZXMgeSB2ZXJ0aWNhbGVzLCByZWZsZXhpb25lcyB5IGRpbGF0YWNpb25lcywgdGFtYmnDqW4gc29uIG9wZXJhY2lvbmVzIGltcG9ydGFudGVzIHF1ZSBwZXJtaXRlbiBtb2RpZmljYXIgbGFzIGdyw6FmaWNhcyBkZSBsYXMgZnVuY2lvbmVzLgogICAgICAgIHAoZGF0YS1hb3M9ImZhZGUtbGVmdCIpIERlIGFjdWVyZG8gY29uIFBhbGFjaW9zIFBpbmVkYSAoMjAxNyksIGxhcyBvcGVyYWNpb25lcyBjb24gZnVuY2lvbmVzIHNvbiBoZXJyYW1pZW50YXMgcG9kZXJvc2FzIGVuIGVsIGFuw6FsaXNpcyBtYXRlbcOhdGljbyB5IHRpZW5lbiBhcGxpY2FjaW9uZXMgZW4gZGl2ZXJzb3MgY2FtcG9zLCBpbmNsdXllbmRvIGxhIGVjb25vbcOtYSB5IGxvcyBuZWdvY2lvcy4gUG9yIGVqZW1wbG8sIGxhIHN1bWEgZGUgZnVuY2lvbmVzIHB1ZWRlIHV0aWxpemFyc2UgcGFyYSBjb21iaW5hciBkaWZlcmVudGVzIGNvbXBvbmVudGVzIGRlIGNvc3RvcyBvIGluZ3Jlc29zLCBtaWVudHJhcyBxdWUgbGEgY29tcG9zaWNpw7NuIGRlIGZ1bmNpb25lcyBwZXJtaXRlIG1vZGVsYXIgcHJvY2Vzb3Mgc2VjdWVuY2lhbGVzIG8gZW4gY2FzY2FkYS4KCiAgICAucm93Lm1iLTUKICAgICAgLmNvbC1sZy00Lm9yZGVyLTIKICAgICAgICBmaWd1cmUKICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEyLzExLnBuZyIsIGRhdGEtYW9zPSJ6b29tLWluIikKICAgICAgLmNvbC1sZy04Lm9yZGVyLTEubWItMy5tYi1sZy0wCiAgICAgICAgLmJnLWNvbG9yLTEucC01Lm1iLTMoZGF0YS1hb3M9ImZhZGUtbGVmdCIpCiAgICAgICAgICBoNSBFamVtcGxvIAogICAgICAgICAgcC5tYi0wIFVuYSBlbXByZXNhIHRpZW5lIGRvcyBsw61uZWFzIGRlIHByb2R1Y2Npw7NuLCBBIHkgQi4gTGEgZnVuY2nDs24gZGUgY29zdG8gZGUgbGEgbMOtbmVhIEEgZXN0w6EgZGFkYSBwb3IgQ19BKHgpID0gMTAwMCArIDIweCwgbWllbnRyYXMgcXVlIGxhIGZ1bmNpw7NuIGRlIGNvc3RvIGRlIGxhIGzDrW5lYSBCIGVzdMOhIGRhZGEgcG9yIENfQih4KSA9IDE1MDAgKyAxNXgsIGRvbmRlIHggZXMgbGEgY2FudGlkYWQgcHJvZHVjaWRhIGVuIGNhZGEgbMOtbmVhLiBQYXJhIGVuY29udHJhciBsYSBmdW5jacOzbiBkZSBjb3N0byB0b3RhbCBkZSBsYSBlbXByZXNhLCBwb2RlbW9zIHN1bWFyIGxhcyBmdW5jaW9uZXMgZGUgY29zdG8gZGUgYW1iYXMgbMOtbmVhczogQ19UKHgpID0gQ19BKHgpICsgQ19CKHgpID0gKDEwMDAgKyAyMHgpICsgKDE1MDAgKyAxNXgpID0gMjUwMCArIDM1eC4gRXN0YSBmdW5jacOzbiByZXN1bHRhbnRlIHJlcHJlc2VudGEgZWwgY29zdG8gdG90YWwgZGUgbGEgZW1wcmVzYSBlbiBmdW5jacOzbiBkZSBsYSBjYW50aWRhZCB0b3RhbCBwcm9kdWNpZGEuCiAgICAKICAgIGgyKGRhdGEtYW9zPSJmYWRlLWxlZnQiKSBFamVyY2ljaW9zCiAgICBwLm1iLTUgQSBjb250aW51YWNpw7NuLCBzZSBwcmVzZW50YW4gZWplcmNpY2lvcyBzb2JyZSBvcGVyYWNpb25lcyBjb24gZnVuY2lvbmVzLgoKICAgIC5yb3cuYWxpZ24taXRlbXMtc3RhcnQubWItNQogICAgICAuY29sLWxnLTQubWItMy5tYi1sZy0wCiAgICAgICAgZmlndXJlCiAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMi8xMi5wbmciLCBhbHQ9IiIpLm1iLTQubWItbGctMAogICAgICAuY29sLWxnLTgKICAgIAogICAgICAgIEFjb3JkaW9uQSh0aXBvPSJiIikKICAgICAgICAgIC5kaXYodGl0dWxvPSJTdW1hIHkgcmVzdGEgZGUgZnVuY2lvbmVzIikKICAgICAgICAgICAgcCBEYWRhcyBsYXMgZnVuY2lvbmVzIGYoeCkgPSAyeCArIDEgeSBnKHgpID0geDIgLSAzLCBlbmNvbnRyYXIgKGYgKyBnKSh4KSB5IChmIC0gZykoeCkuCgogICAgICAgICAgICBwIFNvbHVjacOzbjoKICAgICAgICAgICAgcCBQYXJhIHN1bWFyIG8gcmVzdGFyIGZ1bmNpb25lcywgc2ltcGxlbWVudGUgc3VtYW1vcyBvIHJlc3RhbW9zIGxvcyB0w6lybWlub3MgY29ycmVzcG9uZGllbnRlcyBkZSBjYWRhIGZ1bmNpw7NuLgogICAgICAgICAgICBwLm1iLTAgKGYgKyBnKSh4KSA9ICgyeCArIDEpICsgKHgyIC0gMykgPSB4MiArIDJ4IC0gMgogICAgICAgICAgICBwLm1iLTAgKGYgLSBnKSh4KSA9ICgyeCArIDEpIC0gKHgyIC0gMykgPSAteDIgKyAyeCArIDQKICAgICAgICAgICAgcC5tYi0wIFBvciBsbyB0YW50bywgKGYgKyBnKSh4KSA9IHgyICsgMnggLSAyIHkgKGYgLSBnKSh4KSA9IC14MiArIDJ4ICsgNC4KCiAgICAKICAgICAgICAgIC5kaXYodGl0dWxvPSJDb21wb3NpY2nDs24gZGUgZnVuY2lvbmVzIikKICAgICAgICAgICAgcCBEYWRhcyBsYXMgZnVuY2lvbmVzIGYoeCkgPSB4ICsgMiB5IGcoeCkgPSB4MiwgZW5jb250cmFyIChmIOKImCBnKSh4KSB5IChnIOKImCBmKSh4KS4KCiAgICAgICAgICAgIHAgU29sdWNpw7NuOgogICAgICAgICAgICBwIFBhcmEgY29tcG9uZXIgZnVuY2lvbmVzLCBhcGxpY2Ftb3MgdW5hIGZ1bmNpw7NuIGFsIHJlc3VsdGFkbyBkZSBsYSBvdHJhIGZ1bmNpw7NuLgogICAgICAgICAgICBwLm1iLTAgKGYg4oiYIGcpKHgpID0gZihnKHgpKSA9IGYoeDIpID0geDIgKyAyCiAgICAgICAgICAgIHAubWItMCAoZyDiiJggZikoeCkgPSBnKGYoeCkpID0gZyh4ICsgMikgPSAoeCArIDIpMiA9IHgyICsgNHggKyA0CiAgICAgICAgICAgIHAubWItMCBQb3IgbG8gdGFudG8sIChmIOKImCBnKSh4KSA9IHgyICsgMiB5IChnIOKImCBmKSh4KSA9IHgyICsgNHggKyA0LgoKICAgIAogICAgaDIoZGF0YS1hb3M9ImZhZGUtbGVmdCIpIEVqZW1wbG86IGdyYWZpY2FyIGxhIGZ1bmNpw7NuIGYoeCkgPSB8eCAtIDF8ICsgMi4KICAgIHAubWItNSBMYSBmdW5jacOzbiBkYWRhIGludm9sdWNyYSB1biB2YWxvciBhYnNvbHV0bywgbG8gcXVlIHNpZ25pZmljYSBxdWUgc3UgZ3LDoWZpY2EgdGllbmUgdW4gcHVudG8gZGUgY2FtYmlvIG8gdsOpcnRpY2UuIFBhcmEgcmVwcmVzZW50YXJsYSBjb3JyZWN0YW1lbnRlLCBwcmltZXJvIHNlIGFuYWxpemEgbGEgZnVuY2nDs24gYmFzZSB5IGx1ZWdvIHNlIGFwbGljYSB1bmEgdHJhbnNmb3JtYWNpw7NuIHZlcnRpY2FsLiBBIGNvbnRpbnVhY2nDs24sIHNlIGV4cGxpY2FuIGxvcyBwYXNvcyBwYXJhIG9idGVuZXIgc3UgcmVwcmVzZW50YWNpw7NuIGdyw6FmaWNhLgoKICAgIC5yb3cubWItNQogICAgICAuY29sLWxnLTgKICAgICAgICBkaXYucC00LmJnLWNvbG9yLTYubWItMwogICAgICAgICAgcCA8Yj5BLjwvYj4JUGFyYSBncmFmaWNhciBsYSBmdW5jacOzbiBmKHgpID0gfHggLSAxfCArIDIsIHByaW1lcm8gZ3JhZmljYW1vcyBsYSBmdW5jacOzbiBmKHgpID0gfHggLSAxfCB5IGx1ZWdvIGRlc3BsYXphbW9zIGxhIGdyw6FmaWNhIDIgdW5pZGFkZXMgaGFjaWEgYXJyaWJhLiAKICAgICAgICAgIHAgTGEgZnVuY2nDs24gZih4KSA9IHx4IC0gMXwgdGllbmUgdW4gdsOpcnRpY2UgZW4geCA9IDEgeSBlcyBzaW3DqXRyaWNhIHJlc3BlY3RvIGEgbGEgcmVjdGEgeCA9IDEuCiAgICAgICAgICBwLnRleHQtY2VudGVyLm1iLTAgUGFyYSB4IDwgMSwgZih4KSA9IC0oeCAtIDEpID0gMSAtIHgKICAgICAgICAgIHAudGV4dC1jZW50ZXIgUGFyYSB4ID4gMSwgZih4KSA9IHggLSAxCiAgICAgICAgICBwIDxiPkIuPC9iPglHcmFmaWNhbmRvIGxhcyBkb3MgcmVjdGFzIHkgPSAxIC0geCBwYXJhIHggPCAxIHkgeSA9IHggLSAxIHBhcmEgeCA+IDEsIG9idGVuZW1vcyBsYSBncsOhZmljYSBkZSBmKHgpID0gfHggLSAxfC4KICAgICAgICAgIHAgPGI+Qy48L2I+CUZpbmFsbWVudGUsIGRlc3BsYXphbW9zIGxhIGdyw6FmaWNhIDIgdW5pZGFkZXMgaGFjaWEgYXJyaWJhIHBhcmEgb2J0ZW5lciBsYSBncsOhZmljYSBkZSBmKHgpID0gfHggLSAxfCArIDIuCgogICAgICAuY29sLWxnLTQKICAgICAgICBmaWd1cmUKICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEyLzEzLnBuZyIsIGRhdGEtYW9zPSJ6b29tLWluIikKICAgIAogICAgLnRpdHVsby1maWd1cmEubWItNAogICAgICBoNSBGaWd1cmEgMi4KICAgICAgc3BhbiBHcsOhZmljbyBkZSBsYSBmdW5jacOzbiBmKHgpID0gfHggLSAxfCArIDIKICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5hbGlnbi1pdGVtcy1jZW50ZXIubWItNS5iZy1jb2xvci04CiAgICAgIC5jb2wtbGctNC5wLTQKICAgICAgICBmaWd1cmUKICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEyLzE0LnBuZyIsIGRhdGEtYW9zPSJ6b29tLWluIikKICAgICAgICAKCiAgICAjdF8yXzMudGl0dWxvLXNlZ3VuZG8oZGF0YS1hb3M9ImZsaXAtdXAiKQogICAgICBoMiAjW3NwYW4gMi4zXSBEb21pbmlvIHkgcmFuZ28gZGUgdW5hIGZ1bmNpw7NuCiAgICAKICAgIC5iZy1mdWxsLXdpZHRoLmJnX2ltZwogICAgICAucHgtNC5weC1tZC01LnB5LTQKICAgICAgICAucm93Lm1iLTUKICAgICAgICAgIC5jb2wtbGctMi5vcmRlci0yCiAgICAgICAgICAgIGZpZ3VyZQogICAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEyLzE1LnN2ZyIsIGRhdGEtYW9zPSJ6b29tLWluIikKICAgICAgICAgIC5jb2wtbGctMTAub3JkZXItMS5tYi0zLm1iLWxnLTAKICAgICAgICAgICAgcChkYXRhLWFvcz0iZmFkZS1sZWZ0IikgRWwgZG9taW5pbyBkZSB1bmEgZnVuY2nDs24gZXMgZWwgY29uanVudG8gZGUgdG9kb3MgbG9zIHZhbG9yZXMgcG9zaWJsZXMgcXVlIHB1ZWRlIHRvbWFyIGxhIHZhcmlhYmxlIGluZGVwZW5kaWVudGUgKGVudHJhZGEpIGRlIGxhIGZ1bmNpw7NuLiBFbiBvdHJhcyBwYWxhYnJhcywgZWwgZG9taW5pbyBlc3BlY2lmaWNhIGxvcyB2YWxvcmVzIHBhcmEgbG9zIGN1YWxlcyBsYSBmdW5jacOzbiBlc3TDoSBkZWZpbmlkYS4gUG9yIG90cm8gbGFkbywgZWwgcmFuZ28gZGUgdW5hIGZ1bmNpw7NuIGVzIGVsIGNvbmp1bnRvIGRlIHRvZG9zIGxvcyB2YWxvcmVzIHBvc2libGVzIHF1ZSBwdWVkZSB0b21hciBsYSB2YXJpYWJsZSBkZXBlbmRpZW50ZSAoc2FsaWRhKSBkZSBsYSBmdW5jacOzbiwgZXMgZGVjaXIsIGxvcyB2YWxvcmVzIHJlc3VsdGFudGVzIGRlIGV2YWx1YXIgbGEgZnVuY2nDs24gZW4gbG9zIGVsZW1lbnRvcyBkZWwgZG9taW5pby4KICAgICAgICAKICAgICAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIKICAgICAgICAgIC5jb2wtbGctOAogICAgICAgICAgICAuYmctY29sb3Itd2hpdGUuc2hhZG93LXNvZnQucC00Lm1iLTQKICAgICAgICAgICAgICAucm93Lmp1c3RpZnktY29udGVudC1hcm91bmQuYWxpZ24taXRlbXMtY2VudGVyCiAgICAgICAgICAgICAgICAuY29sLW1kLWF1dG8KICAgICAgICAgICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvdGVtcGxhdGUvdmlkZW8uc3ZnIiwgc3R5bGU9IndpZHRoOiA4MHB4OyIpLm14LWF1dG8ubWItNC5tYi1sZy0wCiAgICAgICAgICAgICAgICAuY29sCiAgICAgICAgICAgICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWJldHdlZW4uYWxpZ24taXRlbXMtY2VudGVyCiAgICAgICAgICAgICAgICAgICAgLmNvbC5tYi0zLm1iLXNtLTAKICAgICAgICAgICAgICAgICAgICAgIGg1Lm1iLTEgRG9taW5pbyBkZSB1bmEgRnVuY2nDs24KICAgICAgICAgICAgICAgICAgICAgIHAubWItMCBQYXJhIGFtcGxpYXIgbG9zIGNvbmNlcHRvcyBzb2JyZSBkb21pbmlvIGRlIHVuYSBmdW5jacOzbiwgbGUgaW52aXRhbW9zIGEgdmVyIGVsIHNpZ3VpZW50ZSB2w61kZW8uCiAgICAgICAgICAgICAgICAgICAgLmNvbC1zbS1hdXRvCiAgICAgICAgICAgICAgICAgICAgICBhLmJvdG9uLmNvbG9yLWFjZW50by1ib3RvbmVzLnRleHRvLWJsYW5jbyhocmVmPSJodHRwczovL3lvdXR1LmJlL3JBX0pGVUZFM1lnIiB0YXJnZXQ9Il9ibGFuayIpCiAgICAgICAgICAgICAgICAgICAgICAgIHNwYW4gVmVyIHZpZGVvCiAgICAgICAgICAgICAgICAgICAgICAgIGkuZmFzLmZhLWFycm93LXJpZ2h0CgogICAgLnJvdy5tYi01CiAgICAgIC5jb2wtbGctNC5tYi0zLm1iLWxnLTAKICAgICAgICBmaWd1cmUKICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEyLzE2LnBuZyIsIGRhdGEtYW9zPSJ6b29tLWluIikKICAgICAgLmNvbC1sZy04ICAgCiAgICAgICAgLmJnLWNvbG9yLTIucC00Lm1iLTMoZGF0YS1hb3M9ImZhZGUtbGVmdCIpCiAgICAgICAgICAucm93LmFsaWduLWl0ZW1zLXN0YXJ0CiAgICAgICAgICAgIC5jb2wtbGctYXV0bwogICAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEyLzEwLnN2ZyIsIHN0eWxlPSJtYXgtd2lkdGg6IDkwcHgiKS5teC1hdXRvCiAgICAgICAgICAgIC5jb2wtbGcKICAgICAgICAgICAgICBwLm1iLTAgU2Vnw7puIFJpcXVlbmVzIFJvZHLDrWd1ZXogZXQgYWwuICgyMDE2KSwgZWwgZG9taW5pbyB5IHJhbmdvIGRlIHVuYSBmdW5jacOzbiBzb24gY29uY2VwdG9zIGZ1bmRhbWVudGFsZXMgZW4gZWwgYW7DoWxpc2lzIG1hdGVtw6F0aWNvIHkgdGllbmVuIGltcGxpY2FjaW9uZXMgaW1wb3J0YW50ZXMgZW4gbGEgbW9kZWxhY2nDs24gZGUgc2l0dWFjaW9uZXMgcmVhbGVzLgogICAgICAgIHAoZGF0YS1hb3M9ImZhZGUtbGVmdCIpIEVuIGVsIGNvbnRleHRvIGVjb27Ds21pY28geSBlbXByZXNhcmlhbCwgZWwgZG9taW5pbyBkZSB1bmEgZnVuY2nDs24gcHVlZGUgcmVwcmVzZW50YXIgbGFzIHJlc3RyaWNjaW9uZXMgbyBsaW1pdGFjaW9uZXMgZW4gbGFzIHZhcmlhYmxlcyBkZSBlbnRyYWRhLCBjb21vIGxhcyBjYW50aWRhZGVzIHByb2R1Y2lkYXMgbyBsb3MgcHJlY2lvcywgbWllbnRyYXMgcXVlIGVsIHJhbmdvIHB1ZWRlIGluZGljYXIgbG9zIHBvc2libGVzIHJlc3VsdGFkb3MgbyB2YWxvcmVzIGRlIHNhbGlkYSwgY29tbyBsb3MgY29zdG9zLCBpbmdyZXNvcyBvIHV0aWxpZGFkZXMuCiAgICAKICAgIGgyKGRhdGEtYW9zPSJmYWRlLWxlZnQiKSBFamVtcGxvOiBEb21pbmlvIHkgcmFuZ28gZGUgdW5hIGZ1bmNpw7NuIGRlIGluZ3Jlc28gdG90YWwKCiAgICBkaXYuYmctY29sb3ItNi5wLTQKICAgICAgcCBVbmEgZW1wcmVzYSB0aWVuZSB1bmEgZnVuY2nDs24gZGUgaW5ncmVzbyB0b3RhbCBkYWRhIHBvcjoKICAgICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLm1iLTMKICAgICAgICAuY29sLWxnLTQKICAgICAgICAgIC50ZXh0LWNlbnRlci5iZy1jb2xvci13aGl0ZS5wLTQKICAgICAgICAgICAgcC5tYi0wIEkoeCkgPSAxMDB4IC0gMC41eMKyCiAgICAgIHAgZG9uZGUgeCByZXByZXNlbnRhIGxhIGNhbnRpZGFkIHZlbmRpZGEuCgogICAgLnJvdy5tYi01CiAgICAgIC5jb2wtbGctNi5wZS0wCiAgICAgICAgZGl2LnAtNC5iZy1jb2xvci02CiAgICAgICAgICBoNSBEZXRlcm1pbmFjacOzbiBkZWwgZG9taW5pbyAgCiAgICAgICAgICB1bC5saXN0YS11bC0tY29sb3IKICAgICAgICAgICAgbGkubWItMC5kLWZsZXgKICAgICAgICAgICAgICBpLmZhci5mYS1hcnJvdy1hbHQtY2lyY2xlLXJpZ2h0LmJnLWNvbG9yLTUKICAgICAgICAgICAgICBwLm1iLTAgTGEgY2FudGlkYWQgdmVuZGlkYSBubyBwdWVkZSBzZXIgbmVnYXRpdmEsIHBvciBsbyBxdWUgeCDiiaUgMC4KICAgICAgICAgICAgbGkubWItMC5kLWZsZXgKICAgICAgICAgICAgICBpLmZhci5mYS1hcnJvdy1hbHQtY2lyY2xlLXJpZ2h0LmJnLWNvbG9yLTUKICAgICAgICAgICAgICBwLm1iLTAgTGEgY2FwYWNpZGFkIG3DoXhpbWEgZGUgcHJvZHVjY2nDs24gZXMgMTAwIHVuaWRhZGVzLCBsbyBxdWUgaW1wb25lIGxhIHJlc3RyaWNjacOzbiB4IOKJpCAxMDAuCiAgICAgICAgICAgIGxpLm1iLTAuZC1mbGV4CiAgICAgICAgICAgICAgaS5mYXIuZmEtYXJyb3ctYWx0LWNpcmNsZS1yaWdodC5iZy1jb2xvci01CiAgICAgICAgICAgICAgcC5tYi0wIFBvciBsbyB0YW50bywgZWwgZG9taW5pbyBkZSBsYSBmdW5jacOzbiBlczogWzAsIDEwMF0KICAgICAgICBmaWd1cmUKICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEyLzE3LnBuZyIsIGRhdGEtYW9zPSJ6b29tLWluIikKICAgICAgLmNvbC1sZy02LnBzLTAKICAgICAgICBkaXYucC00LmJnLWNvbG9yLTguaC0xMDAKICAgICAgICAgIGg1IERldGVybWluYWNpw7NuIGRlbCByYW5nbyAgCiAgICAgICAgICB1bC5saXN0YS11bC0tY29sb3IKICAgICAgICAgICAgbGkubWItMC5kLWZsZXgKICAgICAgICAgICAgICBpLmZhci5mYS1hcnJvdy1hbHQtY2lyY2xlLXJpZ2h0LmJnLWNvbG9yLTUKICAgICAgICAgICAgICBwLm1iLTAgTGEgZnVuY2nDs24gZXMgY3VhZHLDoXRpY2EgY29uIGNvbmNhdmlkYWQgaGFjaWEgYWJham8sIGxvIHF1ZSBpbmRpY2EgbGEgcHJlc2VuY2lhIGRlIHVuIG3DoXhpbW8gYWJzb2x1dG8uCiAgICAgICAgICAgIGxpLm1iLTAuZC1mbGV4CiAgICAgICAgICAgICAgaS5mYXIuZmEtYXJyb3ctYWx0LWNpcmNsZS1yaWdodC5iZy1jb2xvci01CiAgICAgICAgICAgICAgc3BhbiBFbCB2YWxvciBtw6F4aW1vIHNlIGFsY2FuemEgZW4gZWwgdsOpcnRpY2UsIGRldGVybWluYWRvIGFsIGRlcml2YXIgbGEgZnVuY2nDs24gZSBpZ3VhbGFyIGEgY2VybzogCiAgICAgICAgICAgICAgICBwLm1iLTAudGV4dC1jZW50ZXIgSScoeCkgPSAxMDAgLSB4ID0gMCAKICAgICAgICAgICAgICAgIHAudGV4dC1jZW50ZXIgeCA9IDEwMAogICAgICAgICAgICBsaS5tYi0wLmQtZmxleAogICAgICAgICAgICAgIGkuZmFyLmZhLWFycm93LWFsdC1jaXJjbGUtcmlnaHQuYmctY29sb3ItNQogICAgICAgICAgICAgIHNwYW4gRXZhbHVhbW9zIEkoMTAwKSBwYXJhIGVuY29udHJhciBlbCBpbmdyZXNvIG3DoXhpbW86CiAgICAgICAgICAgICAgICBwLm1iLTAgSSgxMDApID0gMTAwKDEwMCkgLSAwLjUoMTAwwrIpID0gNTAwMAogICAgICAgICAgICAgICAgcC5tYi0wIFBvciBsbyB0YW50bywgZWwgcmFuZ28gZGUgbGEgZnVuY2nDs24gZXM6IFswLCA1MDAwXQoKICAgIGgyKGRhdGEtYW9zPSJmYWRlLWxlZnQiKSBFamVyY2ljaW9zCiAgICBwLm1iLTUgRW4gZXN0b3MgZWplcmNpY2lvcyBzZSBhbmFsaXphcsOhbiBlbCBkb21pbmlvIHkgZWwgcmFuZ28gZGUgZGlzdGludGFzIGZ1bmNpb25lcyBtYXRlbcOhdGljYXMuIFNlIGFib3JkYXLDoW4gZnVuY2lvbmVzIGNvbiByYcOtY2VzLCBmcmFjY2lvbmVzIHkgZXhwcmVzaW9uZXMgbGluZWFsZXMsIGRlc3RhY2FuZG8gbGFzIHJlc3RyaWNjaW9uZXMgZW4gc3VzIHZhcmlhYmxlcyB5IGxvcyB2YWxvcmVzIHF1ZSBwdWVkZW4gYXN1bWlyIHN1cyByZXN1bHRhZG9zLgoKICAgIC5iZy1mdWxsLXdpZHRoLmJnLWZvbmRvLXNsaWRlci5tYi01CiAgICAgIC5wLTQucC1tZC01CiAgICAgICAgU2x5ZGVyQSh0aXBvPSJiIikuYmctd2hpdGUKICAgICAgICAgIC5yb3cuYWxpZ24taXRlbXMtY2VudGVyLnAtNC5wLW1kLTUKICAgICAgICAgICAgLmNvbC1sZy01Lm1iLTMubWItbGctMC5vcmRlci1sZy0yCiAgICAgICAgICAgICAgZmlndXJlCiAgICAgICAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMi8xOC5wbmciKQogICAgICAgICAgICAuY29sLWxnLTcub3JkZXItbGctMQogICAgICAgICAgICAgIGg1IERvbWluaW8geSByYW5nbyBkZSBmKHgpID0g4oiaKHggKyA0KS4KICAgICAgICAgICAgICBwIERldGVybWluYXIgZWwgZG9taW5pbyB5IHJhbmdvIGRlIGxhIGZ1bmNpw7NuIGYoeCkgPSDiiJooeCArIDQpLgoKICAgICAgICAgICAgICBoNSBTb2x1Y2nDs246CiAgICAgICAgICAgICAgICBwLm1iLTAgLSBEb21pbmlvOiBQYXJhIHF1ZSBsYSByYcOteiBjdWFkcmFkYSBlc3TDqSBkZWZpbmlkYSwgZWwgYXJndW1lbnRvIGRlYmUgc2VyIG5vIG5lZ2F0aXZvLgogICAgICAgICAgICAgICAgICBwLm1iLTAgeCArIDQg4omlIDAKICAgICAgICAgICAgICAgICAgcC5tYi0wIHgg4omlIC00CiAgICAgICAgICAgICAgICAgIHAgUG9yIGxvIHRhbnRvLCBlbCBkb21pbmlvIGRlIGxhIGZ1bmNpw7NuIGVzIFstNCwg4oieKS4KICAgICAgICAgICAgICAgIHAgLSBSYW5nbzogbGEgcmHDrXogY3VhZHJhZGEgc2llbXByZSBwcm9kdWNlIHZhbG9yZXMgbm8gbmVnYXRpdm9zLiBBZGVtw6FzLCBhIG1lZGlkYSBxdWUgeCBhdW1lbnRhLCBsYSByYcOteiAgICAgICAgICAgICBwIGN1YWRyYWRhIGRlIHggKyA0IHRhbWJpw6luIGF1bWVudGEuIEVsIHZhbG9yIG3DrW5pbW8gc2UgYWxjYW56YSBjdWFuZG8geCA9IC00LCB5IGYoLTQpID0g4oiaKDApID0gMC4gUG9yIGxvICAgICAgICAgICAgIHAgdGFudG8sIGVsIHJhbmdvIGRlIGxhIGZ1bmNpw7NuIGVzIFswLCDiiJ4pLgoKICAgIAogICAgICAgICAgLnJvdy5hbGlnbi1pdGVtcy1jZW50ZXIucC00LnAtbWQtNQogICAgICAgICAgICAuY29sLWxnLTUubWItMy5tYi1sZy0wLm9yZGVyLWxnLTIKICAgICAgICAgICAgICBmaWd1cmUKICAgICAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEyLzE5LnBuZyIpCiAgICAgICAgICAgIC5jb2wtbGctNy5vcmRlci1sZy0xCiAgICAgICAgICAgICAgaDUgRG9taW5pbyBkZSBmKHgpID0gKHgyIC0gMSkgLyAoeCAtIDEpLgogICAgICAgICAgICAgIHAgRGV0ZXJtaW5hciBlbCBkb21pbmlvIGRlIGxhIGZ1bmNpw7NuIGYoeCkgPSAoeDIgLSAxKSAvICh4IC0gMSkuCgogICAgICAgICAgICAgIGg1IFNvbHVjacOzbjoKICAgICAgICAgICAgICAgIHAubWItMCAtIERvbWluaW86IExhIGZ1bmNpw7NuIGVzdMOhIGRlZmluaWRhIHBhcmEgdG9kb3MgbG9zIHZhbG9yZXMgZGUgeCBleGNlcHRvIGRvbmRlIGVsIGRlbm9taW5hZG9yIHNlIGhhY2UgICAgICAgICAgICAgIHAgY2Vyby4KICAgICAgICAgICAgICAgICAgcC5tYi0wIHggLSAxIOKJoCAwCiAgICAgICAgICAgICAgICAgIHAubWItMCB4IOKJoCAxCiAgICAgICAgICAgICAgICAgIHAgUG9yIGxvIHRhbnRvLCBlbCBkb21pbmlvIGRlIGxhIGZ1bmNpw7NuIGVzICgt4oieLCAxKSDiiKogKDEsIOKIniksIGVzIGRlY2lyLCB0b2RvcyBsb3MgbsO6bWVyb3MgcmVhbGVzIGV4Y2VwdG8gMS4KICAgICAgICAgIC5yb3cuYWxpZ24taXRlbXMtY2VudGVyLnAtNC5wLW1kLTUKICAgICAgICAgICAgLmNvbC1sZy01Lm1iLTMubWItbGctMC5vcmRlci1sZy0yCiAgICAgICAgICAgICAgZmlndXJlCiAgICAgICAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMi8yMC5wbmciKQogICAgICAgICAgICAuY29sLWxnLTcub3JkZXItbGctMQogICAgICAgICAgICAgIGg1IFJhbmdvIGRlIGYoeCkgPSAtMnggKyAzLgogICAgICAgICAgICAgIHAgRGV0ZXJtaW5hciBlbCByYW5nbyBkZSBsYSBmdW5jacOzbiBmKHgpID0gLTJ4ICsgMy4KCiAgICAgICAgICAgICAgaDUgU29sdWNpw7NuOgogICAgICAgICAgICAgIHAubWItMCBSYW5nbzogbGEgZnVuY2nDs24gbGluZWFsIGYoeCkgPSAtMnggKyAzIHRpZW5lIHVuYSBwZW5kaWVudGUgbmVnYXRpdmEsIGxvIHF1ZSBzaWduaWZpY2EgcXVlIGEgbWVkaWRhIHF1ZSB4IGF1bWVudGEsIGYoeCkgZGlzbWludXllLiBMYSBmdW5jacOzbiB0b21hIHRvZG9zIGxvcyB2YWxvcmVzIHJlYWxlcy4gUG9yIGxvIHRhbnRvLCBlbCByYW5nbyBkZSBsYSBmdW5jacOzbiBlcyAoLeKIniwg4oieKSwgZXMgZGVjaXIsIHRvZG9zIGxvcyBuw7ptZXJvcyByZWFsZXMuCgogICAgI3RfMl80LnRpdHVsby1zZWd1bmRvKGRhdGEtYW9zPSJmbGlwLXVwIikKICAgICAgaDIgI1tzcGFuIDIuNF0gVGlwb3MgZGUgZnVuY2lvbmVzIAogICAgCiAgICBwLm1iLTQgTGFzIGZ1bmNpb25lcyBtYXRlbcOhdGljYXMgZGVzZW1wZcOxYW4gdW4gcGFwZWwgZnVuZGFtZW50YWwgZW4gbGEgY29tcHJlbnNpw7NuIHkgbW9kZWxhZG8gZGUgZmVuw7NtZW5vcyBlbiBkaXZlcnNhcyBkaXNjaXBsaW5hcywgZGVzZGUgbGEgZsOtc2ljYSB5IGxhIGVjb25vbcOtYSBoYXN0YSBsYSBiaW9sb2fDrWEgeSBsYSBpbmdlbmllcsOtYS4gQSB0cmF2w6lzIGRlIHN1IGVzdHVkaW8sIGVzIHBvc2libGUgYW5hbGl6YXIgY8OzbW8gdW5hIHZhcmlhYmxlIGRlcGVuZGUgZGUgb3RyYSB5IHByZWRlY2lyIGNvbXBvcnRhbWllbnRvcyBlbiBkaXN0aW50b3MgY29udGV4dG9zLgoKICAgIC5iZy1mdWxsLXdpZHRoLmJnLWNvbG9yLTYubWItbGctNQogICAgICAucHgtNC5wLW1kLTUKICAgICAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIuYWxpZ24taXRlbXMtY2VudGVyCiAgICAgICAgICAuY29sLWxnLTcubWItMy5tYi1sZy0wCiAgICAgICAgICAgIGgyLm1iLTQoZGF0YS1hb3M9ImZsaXAtdXAiKSBUaXBvcyBkZSBmdW5jaW9uZXMKICAgICAgICAgICAgcC5tYi00KGRhdGEtYW9zPSJmYWRlLXJpZ2h0IikgTG9zIGludml0YW1vcyBhIGxlZXIgPGI+VGlwb3MgZGUgZnVuY2lvbmVzPC9iPiwgdW4gcmVjb3JyaWRvIHBvciBsYXMgZnVuY2lvbmVzIGxpbmVhbGVzLCBjdWFkcsOhdGljYXMsIGV4cG9uZW5jaWFsZXMgeSBsb2dhcsOtdG1pY2FzLCBjb24gYXBsaWNhY2lvbmVzIGNsYXZlIGVuIGxhIGdlc3Rpw7NuIGVtcHJlc2FyaWFsLiBBIHRyYXbDqXMgZGUgZWplbXBsb3MgeSBlamVyY2ljaW9zIHByw6FjdGljb3MsIGVzdGUgbWF0ZXJpYWwgcGVybWl0aXLDoSBjb21wcmVuZGVyIGPDs21vIGVzdGFzIGZ1bmNpb25lcyBtb2RlbGFuIGZlbsOzbWVub3MgZWNvbsOzbWljb3MgeSBmaW5hbmNpZXJvcywgZmFjaWxpdGFuZG8gbGEgdG9tYSBkZSBkZWNpc2lvbmVzIHkgZWwgYW7DoWxpc2lzIGRlIGRhdG9zIGVuIGRpc3RpbnRvcyBjb250ZXh0b3MuCiAgICAKICAgICAgICAgICAgYS5hbmV4by5tYi00LmJnLXdoaXRlLnctZml0KDpocmVmPSJvYnRlbmVyTGluaygnL2Rvd25sb2Fkcy9BbmV4b18xLnBkZicpIiB0YXJnZXQ9Il9ibGFuayIpKGRhdGEtYW9zPSJmbGlwLXVwIikKICAgICAgICAgICAgICAuYW5leG9fX2ljb25vKDpzdHlsZT0ieydiYWNrZ3JvdW5kLWNvbG9yJzogJyNGQ0RGREInfSIpCiAgICAgICAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy90ZW1wbGF0ZS9pY29uby1wZGYuc3ZnIikKICAgICAgICAgICAgICAuYW5leG9fX3RleHRvCiAgICAgICAgICAgICAgICBwIDxzdHJvbmc+QW5leG8uIDwvc3Ryb25nPiBUaXBvcyBkZSBmdW5jaW9uZXMuCiAgICAKICAgICAgICAgIC5jb2wtbGctNQogICAgICAgICAgICBmaWd1cmUoZGF0YS1hb3M9Inpvb20taW4iKQogICAgICAgICAgICAgIGltZyhzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWEyLzIxLnBuZycsIGFsdD0nJykKCiAgICAuYmctZnVsbC13aWR0aC5ib3JkZXItdG9wLmFjdGl2aWRhZC5iZy1jb2xvci1hY3RpdmlkYWQKICAgICAgLnAtNC5wLW1kLTUKICAgICAgICAjQWN0aXZpZGFkICAgICAgICAgICAgICAgIAogICAgICAgICAgPEFjdGl2aWRhZCA6Y3Vlc3Rpb25hcmlvPSJjdWVzdGlvbmFyaW8iLz4KCiAgICAuYmctZnVsbC13aWR0aC5ib3JkZXItdG9wLmNvbG9yLXByaW1hcmlvCiAgICAgIC5wLTQucC1tZC01CiAgICAgICAgaDIoZGF0YS1hb3M9ImZhZGUtbGVmdCIpIE1BVEVSSUFMIENPTVBMRU1FTlRBUklPCiAgICAgICAgLnJvdy5tYXRlcmlhbC1jb21wbGVtZW50YXJpbwogICAgICAgICAgLmNvbC0xMi5jb2wtbWQtNi5jb2wtbGctNwogICAgICAgICAgICBwIExvcyBpbnZpdGFtb3MgYSBleHBsb3JhciBlbCBtYXRlcmlhbCBjb21wbGVtZW50YXJpbyBkZSBlc3RlIGN1cnNvLCBlbiBlc3RhIHNlY2Npw7NuIGVuY29udHJhcsOhIHJlY3Vyc29zIHF1ZSBsZSBwZXJtaXRpcsOhbiBwcm9mdW5kaXphciAgeSBlbnJpcXVlY2VyIHN1IGFwcmVuZGl6YWplIGVuIGxvcyB0ZW1hcyB0cmF0YWRvcyBlbiBlc3RhIHVuaWRhZC4KCiAgICAgICAgICAgIHAuZC1mbGV4Lm15LTQKICAgICAgICAgICAgICBpbWcubWUtMyhzcmM9J0AvYXNzZXRzL2NvbXBvbmVudGVzL2xpbmsuc3ZnJyA6c3R5bGU9InsnbWF4LXdpZHRoJzonMTZweCd9IikKICAgICAgICAgICAgICBhKGhyZWY9Imh0dHBzOi8vZWxpYnJvLm5ldC9lcy9sYy90ZWNub2xvZ2ljYWRlbG9yaWVudGUvdGl0dWxvcy80MDQ1MiIgdGFyZ2V0PSJfYmxhbmsiIHJlbD0ibm9vcGVuZXIgbm9yZWZlcnJlciIpIEdhcmPDrWEgRnJhbmNoaW5pLCBDLiAmIEFsdmFyYWRvIEFyZWxsYW5vLCBNLiAoMjAxNikuIEPDoWxjdWxvIGRpZmVyZW5jaWFsIGVuIGNvbXBldGVuY2lhczogKCBlZC4pLiBHcnVwbyBFZGl0b3JpYWwgUGF0cmlhLiAKCiAgICAgICAgICAgIHAuZC1mbGV4Lm15LTQKICAgICAgICAgICAgICBpbWcubWUtMyhzcmM9J0AvYXNzZXRzL2NvbXBvbmVudGVzL2xpbmsuc3ZnJyA6c3R5bGU9InsnbWF4LXdpZHRoJzonMTZweCd9IikKICAgICAgICAgICAgICBhKGhyZWY9Imh0dHBzOi8vZWxpYnJvLm5ldC9lcy9lcmVhZGVyL3RlY25vbG9naWNhZGVsb3JpZW50ZS80MDQwNT9wYWdlPTEiIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIG5vcmVmZXJyZXIiKSBPcnRpeiBDYW1wb3MsIEYuIEouIE9ydGl6IENlcmVjZWRvLCBGLiBKLiAmIE9ydGl6IENlcmVjZWRvLCBGLiBKLiAoMjAxNikuIEPDoWxjdWxvIGRpZmVyZW5jaWFsOiAoMiBlZC4pLiBHcnVwbyBFZGl0b3JpYWwgUGF0cmlhLiAKICAgICAgICAgICAgcC5kLWZsZXgubXktNAogICAgICAgICAgICAgIGltZy5tZS0zKHNyYz0nQC9hc3NldHMvY29tcG9uZW50ZXMvbGluay5zdmcnIDpzdHlsZT0ieydtYXgtd2lkdGgnOicxNnB4J30iKQogICAgICAgICAgICAgIGEoaHJlZj0iaHR0cHM6Ly9lbGlicm8ubmV0L2VzL2xjL3RlY25vbG9naWNhZGVsb3JpZW50ZS90aXR1bG9zLzQwNDk4IiB0YXJnZXQ9Il9ibGFuayIgcmVsPSJub29wZW5lciBub3JlZmVycmVyIikgUGFsYWNpb3MgUGluZWRhLCBMLiBNLiAoMjAxNykuIEPDoWxjdWxvIGRlIHZhcmlhcyB2YXJpYWJsZXM6ICggZWQuKS4gR3J1cG8gRWRpdG9yaWFsIFBhdHJpYS4gCiAgICAgICAgICAgIHAuZC1mbGV4Lm15LTQKICAgICAgICAgICAgICBpbWcubWUtMyhzcmM9J0AvYXNzZXRzL2NvbXBvbmVudGVzL2xpbmsuc3ZnJyA6c3R5bGU9InsnbWF4LXdpZHRoJzonMTZweCd9IikKICAgICAgICAgICAgICBhKGhyZWY9Imh0dHBzOi8vZWxpYnJvLm5ldC9lcy9lcmVhZGVyL3RlY25vbG9naWNhZGVsb3JpZW50ZS83MTY1Mj9wYWdlPTEiIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIG5vcmVmZXJyZXIiKSBSaXF1ZW5lcyBSb2Ryw61ndWV6LCBNLiBTw6FuY2hleiBDYWJyZXJhLCBSLiAmIFBheiBSb2Ryw61ndWV6LCBKLiAoMjAxNikuIEVqZXJjaWNpb3MgeSBwcm9ibGVtYXMgc29icmUgY8OhbGN1bG8gZGlmZXJlbmNpYWwgZGUgZnVuY2lvbmVzIHJlYWxlcyBkZSB1bmEgdmFyaWFibGUgcmVhbDogKCBlZC4pLiBFZGl0b3JpYWwgVW5pdmVyc2l0YXJpYS4KICAgICAgICAgICAgcC5kLWZsZXgubXktNAogICAgICAgICAgICAgIGltZy5tZS0zKHNyYz0nQC9hc3NldHMvY29tcG9uZW50ZXMvbGluay5zdmcnIDpzdHlsZT0ieydtYXgtd2lkdGgnOicxNnB4J30iKQogICAgICAgICAgICAgIGEoaHJlZj0iIGh0dHBzOi8vd3d3Lm1lcC5nby5jci9lZHVjYXRpY28vcmVjdXJzb3MtbGlicmVzLW1hdGVtYXRpY2EtaW50cm9kdWNjaW9uLWZ1bmNpb25lcyIgdGFyZ2V0PSJfYmxhbmsiIHJlbD0ibm9vcGVuZXIgbm9yZWZlcnJlciIpIE1pbmlzdGVyaW8gZGUgRWR1Y2FjacOzbiBQw7pibGljYSBkZSBDb3N0YSBSaWNhLiAocy5mLikuIFJlY3Vyc29zIGxpYnJlcyBkZSBtYXRlbcOhdGljYTogaW50cm9kdWNjacOzbiBhIGxhcyBmdW5jaW9uZXMuIAogICAgICAgICAgICBwLmQtZmxleC5teS00CiAgICAgICAgICAgICAgaW1nLm1lLTMoc3JjPSdAL2Fzc2V0cy9jb21wb25lbnRlcy9saW5rLnN2ZycgOnN0eWxlPSJ7J21heC13aWR0aCc6JzE2cHgnfSIpCiAgICAgICAgICAgICAgYShocmVmPSJodHRwczovL2ZsZXhib29rcy5jazEyLm9yZy9jYm9vay9jay0xMi1jb25jZXB0b3MtZGUtJUMzJUExbGdlYnJhLW5pdmVsLWIlQzMlQTFzaWNvLWVuLWVzcGElQzMlQjFvbC9zZWN0aW9uLzEuMTIvcHJpbWFyeS9sZXNzb24vZnVuY2lvbmVzLXF1ZS1kZXNjcmliZW4tc2l0dWFjaW9uZXMtYnNjLWFsZy1zcG4vP3JlZmVycmVyPXNlYXJjaCAiIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIG5vcmVmZXJyZXIiKSBDSy0xMiBGb3VuZGF0aW9uLiAocy5mLikuIEZ1bmNpb25lczogQ29uY2VwdG9zIGLDoXNpY29zLiAKICAgICAgICAgICAgcC5kLWZsZXgubXktNAogICAgICAgICAgICAgIGltZy5tZS0zKHNyYz0nQC9hc3NldHMvY29tcG9uZW50ZXMvbGluay5zdmcnIDpzdHlsZT0ieydtYXgtd2lkdGgnOicxNnB4J30iKQogICAgICAgICAgICAgIGEoaHJlZj0iaHR0cHM6Ly9zdGVtb25saW5lLnRlY2gvZXMvbWF0ZW1hdGljYXMvZ3JhZmljYXMvIiB0YXJnZXQ9Il9ibGFuayIgcmVsPSJub29wZW5lciBub3JlZmVycmVyIikgU1RFTSBPbmxpbmUgVGVjaC4gKHMuZi4pLiBTaW11bGFjaW9uZXMgZ3LDoWZpY2FzIGRlIGZ1bmNpb25lcyBvbmxpbmUgZ3JhdGlzLiAgCgogICAgICAgICAgICBwLmQtZmxleC5teS00CiAgICAgICAgICAgICAgaW1nLm1lLTMoc3JjPSdAL2Fzc2V0cy90ZW1wbGF0ZS9pY29uby15dC5zdmcnIDpzdHlsZT0ieydtYXgtd2lkdGgnOicxNnB4J30iKQogICAgICAgICAgICAgIGEoaHJlZj0iaHR0cHM6Ly95b3V0dS5iZS9xekVJNVVYbGplVSAiIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIG5vcmVmZXJyZXIiKSDDiXBzaWxvbiBBa2RlbXkuICgyMDIwLCAxMyBkZSBtYXJ6bykuIMK/UXXDqSBlcyB1bmEgZnVuY2nDs24/IFtWaWRlb10uIFlvdVR1YmUgCiAgICAgICAgICAgIHAuZC1mbGV4Lm15LTQKICAgICAgICAgICAgICBpbWcubWUtMyhzcmM9J0AvYXNzZXRzL3RlbXBsYXRlL2ljb25vLXl0LnN2ZycgOnN0eWxlPSJ7J21heC13aWR0aCc6JzE2cHgnfSIpCiAgICAgICAgICAgICAgYShocmVmPSJodHRwczovL3lvdXR1LmJlL3JBX0pGVUZFM1lnIiB0YXJnZXQ9Il9ibGFuayIgcmVsPSJub29wZW5lciBub3JlZmVycmVyIikgw4lwc2lsb24gQWtkZW15LiAoMjAyMCwgMTUgZGUgbWFyem8pLiBEb21pbmlvIGRlIHVuYSBmdW5jacOzbi4gW1ZpZGVvXS4gWW91VHViZSAgCgogICAgICAgICAgLmNvbC0xMi5jb2wtbWQtNi5jb2wtbGctMy5vZmZzZXQtbGctMQogICAgICAgICAgICBmaWd1cmUKICAgICAgICAgICAgICBpbWcoc3JjPSdAL2Fzc2V0cy9jb21wb25lbnRlcy9tYXRlcmlhbC1jb21wbGVtZW50YXJpby5zdmcnLCBhbHQ9JycpCgo="},null]}